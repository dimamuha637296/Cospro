// Remove the default `border-radius` that macOS Chrome adds.
//
// Details at https://github.com/twbs/bootstrap/issues/24093
button {
  border-radius: 0;
}

button:focus {
  outline: none;
}

// END reboot

.btn {
  @include font-family-medium();
  display: inline-block;
  text-align: center;
  vertical-align: middle;
  user-select: none;
  max-width: 100%;
  text-decoration: none;
  border: 1px solid transparent;
  padding: 16px 40px;
  font-size: 16px;
  line-height: 1;
  letter-spacing: 0.05em;
  text-transform: uppercase;
  border-radius: $border-radius-base;
  color: $brand-white;
  transition: all .15s ease-in-out; // prevent flickering on link buttons
  text-overflow: ellipsis;
  overflow: hidden;
  white-space: nowrap;

  // Share hover and focus styles
  @include hover-focus {
    outline: none;
    color: $brand-white;
    text-decoration: none;
  }

  // Disabled comes first so active can properly restyle
  &.disabled,
  &:disabled {
    //opacity: .65;
    pointer-events: none;
    cursor: not-allowed;
  }

  // Opinionated: add "hand" cursor to non-disabled .btn elements
  &:not(:disabled):not(.disabled) {
    cursor: pointer;

    &:active,
    &.active {
      //background-image: none;
      //box-shadow: inset 0 1px 3px rgba(0,0,0,.1);
    }
  }

  &.with-icon {
    padding-top: 0;
    padding-bottom: 0;
    height: 50px;

    > * {
      display: inline-block;
      vertical-align: middle;
    }

    &.icon-left {

      .icon {
        margin-right: 10px;
      }
    }

    &.icon-right {

      .icon {
        margin-left: 10px;
      }
    }
  }

  .icon {

    .g-wrap & {
      @include svg();
      position: relative;
      top: auto;
      bottom: auto;
      left: auto;
      right: auto;
      color: transparent;
      background-color: transparent;
    }
  }

  &.addToBasket {

    &[class*="outline" ] {

      .icon {
        @include svg-toBasket-black();
      }

      @include hover-focus() {

        .icon {
          @include svg-toBasket();
        }
      }

      &.active,
      &:active {

        .icon {
          @include svg-toBasket();
        }
      }

      &.disabled,
      &[disabled] {

        .icon {
          @include svg-toBasket-black();
        }
      }
    }

    .icon {
      @include svg-toBasket();
    }

    @include hover-focus() {

      .icon {
        @include svg-toBasket();
      }
    }

    &.active,
    &:active {

      .icon {
        @include svg-toBasket();
      }
    }

    &.disabled,
    &[disabled] {

      .icon {
        @include svg-toBasket-black();
      }
    }
  }

  &.addFavorites {

    &[class*="outline" ] {

      .icon {
        @include svg-toFavorites-black();
      }

      @include hover-focus() {

        .icon {
          @include svg-toFavorites();
        }
      }

      &.active,
      &:active {

        .icon {
          @include svg-toFavorites();
        }
      }

      &.disabled,
      &[disabled] {

        .icon {
          @include svg-toFavorites-black();
        }
      }
    }

    .icon {
      @include svg-toFavorites();
    }

    @include hover-focus() {

      .icon {
        @include svg-toFavorites();
      }
    }

    &.active,
    &:active {

      .icon {
        @include svg-toFavorites();
      }
    }

    &.disabled,
    &[disabled] {

      .icon {
        @include svg-toFavorites-black();
      }
    }
  }

  &.toAccount {

    &[class*="outline" ] {

      .icon {
        @include svg-toAccount-black();
      }

      @include hover-focus() {

        .icon {
          @include svg-toAccount();
        }
      }

      &.active,
      &:active {

        .icon {
          @include svg-toAccount();
        }
      }

      &.disabled,
      &[disabled] {

        .icon {
          @include svg-toAccount-black();
        }
      }
    }

    .icon {
      @include svg-toAccount();
    }

    @include hover-focus() {

      .icon {
        @include svg-toAccount();
      }
    }

    &.active,
    &:active {

      .icon {
        @include svg-toAccount();
      }
    }

    &.disabled,
    &[disabled] {

      .icon {
        @include svg-toAccount-black();
      }
    }
  }

  &.toReg {

    &[class*="outline" ] {

      .icon {
        @include svg-toReg-black();
      }

      @include hover-focus() {

        .icon {
          @include svg-toReg();
        }
      }

      &.active,
      &:active {

        .icon {
          @include svg-toReg();
        }
      }

      &.disabled,
      &[disabled] {

        .icon {
          @include svg-toReg-black();
        }
      }
    }

    .icon {
      @include svg-toReg();
    }

    @include hover-focus() {

      .icon {
        @include svg-toReg();
      }
    }

    &.active,
    &:active {

      .icon {
        @include svg-toReg();
      }
    }

    &.disabled,
    &[disabled] {

      .icon {
        @include svg-toReg-black();
      }
    }
  }

  &.toSave {

    &[class*="outline" ] {

      .icon {
        @include svg-toSave-black();
      }

      @include hover-focus() {

        .icon {
          @include svg-toSave();
        }
      }

      &.active,
      &:active {

        .icon {
          @include svg-toSave();
        }
      }

      &.disabled,
      &[disabled] {

        .icon {
          @include svg-toSave-black();
        }
      }
    }

    .icon {
      @include svg-toSave();
    }

    @include hover-focus() {

      .icon {
        @include svg-toSave();
      }
    }

    &.active,
    &:active {

      .icon {
        @include svg-toSave();
      }
    }

    &.disabled,
    &[disabled] {

      .icon {
        @include svg-toSave-black();
      }
    }
  }
}

// Future-proof disabling of clicks on `<a>` elements
a.btn.disabled,
fieldset:disabled a.btn {
  pointer-events: none;
}